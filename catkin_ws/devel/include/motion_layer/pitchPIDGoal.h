// Generated by gencpp from file motion_layer/pitchPIDGoal.msg
// DO NOT EDIT!


#ifndef MOTION_LAYER_MESSAGE_PITCHPIDGOAL_H
#define MOTION_LAYER_MESSAGE_PITCHPIDGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_layer
{
template <class ContainerAllocator>
struct pitchPIDGoal_
{
  typedef pitchPIDGoal_<ContainerAllocator> Type;

  pitchPIDGoal_()
    : target_pitch(0.0)  {
    }
  pitchPIDGoal_(const ContainerAllocator& _alloc)
    : target_pitch(0.0)  {
  (void)_alloc;
    }



   typedef float _target_pitch_type;
  _target_pitch_type target_pitch;





  typedef boost::shared_ptr< ::motion_layer::pitchPIDGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_layer::pitchPIDGoal_<ContainerAllocator> const> ConstPtr;

}; // struct pitchPIDGoal_

typedef ::motion_layer::pitchPIDGoal_<std::allocator<void> > pitchPIDGoal;

typedef boost::shared_ptr< ::motion_layer::pitchPIDGoal > pitchPIDGoalPtr;
typedef boost::shared_ptr< ::motion_layer::pitchPIDGoal const> pitchPIDGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_layer::pitchPIDGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motion_layer::pitchPIDGoal_<ContainerAllocator1> & lhs, const ::motion_layer::pitchPIDGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_pitch == rhs.target_pitch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motion_layer::pitchPIDGoal_<ContainerAllocator1> & lhs, const ::motion_layer::pitchPIDGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motion_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_layer::pitchPIDGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_layer::pitchPIDGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_layer::pitchPIDGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec0b683a317c75858db233efbba002eb";
  }

  static const char* value(const ::motion_layer::pitchPIDGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec0b683a317c7585ULL;
  static const uint64_t static_value2 = 0x8db233efbba002ebULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_layer/pitchPIDGoal";
  }

  static const char* value(const ::motion_layer::pitchPIDGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"float32 target_pitch\n"
;
  }

  static const char* value(const ::motion_layer::pitchPIDGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pitchPIDGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_layer::pitchPIDGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_layer::pitchPIDGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.target_pitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_LAYER_MESSAGE_PITCHPIDGOAL_H
