// Generated by gencpp from file master_layer/CurrentTaskRequest.msg
// DO NOT EDIT!


#ifndef MASTER_LAYER_MESSAGE_CURRENTTASKREQUEST_H
#define MASTER_LAYER_MESSAGE_CURRENTTASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_layer
{
template <class ContainerAllocator>
struct CurrentTaskRequest_
{
  typedef CurrentTaskRequest_<ContainerAllocator> Type;

  CurrentTaskRequest_()
    : current_task()  {
    }
  CurrentTaskRequest_(const ContainerAllocator& _alloc)
    : current_task(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_task_type;
  _current_task_type current_task;





  typedef boost::shared_ptr< ::master_layer::CurrentTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_layer::CurrentTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentTaskRequest_

typedef ::master_layer::CurrentTaskRequest_<std::allocator<void> > CurrentTaskRequest;

typedef boost::shared_ptr< ::master_layer::CurrentTaskRequest > CurrentTaskRequestPtr;
typedef boost::shared_ptr< ::master_layer::CurrentTaskRequest const> CurrentTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_layer::CurrentTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_layer::CurrentTaskRequest_<ContainerAllocator1> & lhs, const ::master_layer::CurrentTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.current_task == rhs.current_task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_layer::CurrentTaskRequest_<ContainerAllocator1> & lhs, const ::master_layer::CurrentTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::CurrentTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::CurrentTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::CurrentTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7db291b084ee9992703e0d986bd2189c";
  }

  static const char* value(const ::master_layer::CurrentTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7db291b084ee9992ULL;
  static const uint64_t static_value2 = 0x703e0d986bd2189cULL;
};

template<class ContainerAllocator>
struct DataType< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_layer/CurrentTaskRequest";
  }

  static const char* value(const ::master_layer::CurrentTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string current_task\n"
;
  }

  static const char* value(const ::master_layer::CurrentTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_layer::CurrentTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_layer::CurrentTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "current_task: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_LAYER_MESSAGE_CURRENTTASKREQUEST_H
