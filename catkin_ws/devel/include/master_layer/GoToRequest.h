// Generated by gencpp from file master_layer/GoToRequest.msg
// DO NOT EDIT!


#ifndef MASTER_LAYER_MESSAGE_GOTOREQUEST_H
#define MASTER_LAYER_MESSAGE_GOTOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <master_layer/Waypoint.h>

namespace master_layer
{
template <class ContainerAllocator>
struct GoToRequest_
{
  typedef GoToRequest_<ContainerAllocator> Type;

  GoToRequest_()
    : waypoint()
    , max_forward_speed(0.0)
    , interpolator()  {
    }
  GoToRequest_(const ContainerAllocator& _alloc)
    : waypoint(_alloc)
    , max_forward_speed(0.0)
    , interpolator(_alloc)  {
  (void)_alloc;
    }



   typedef  ::master_layer::Waypoint_<ContainerAllocator>  _waypoint_type;
  _waypoint_type waypoint;

   typedef double _max_forward_speed_type;
  _max_forward_speed_type max_forward_speed;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _interpolator_type;
  _interpolator_type interpolator;





  typedef boost::shared_ptr< ::master_layer::GoToRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_layer::GoToRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GoToRequest_

typedef ::master_layer::GoToRequest_<std::allocator<void> > GoToRequest;

typedef boost::shared_ptr< ::master_layer::GoToRequest > GoToRequestPtr;
typedef boost::shared_ptr< ::master_layer::GoToRequest const> GoToRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_layer::GoToRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_layer::GoToRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_layer::GoToRequest_<ContainerAllocator1> & lhs, const ::master_layer::GoToRequest_<ContainerAllocator2> & rhs)
{
  return lhs.waypoint == rhs.waypoint &&
    lhs.max_forward_speed == rhs.max_forward_speed &&
    lhs.interpolator == rhs.interpolator;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_layer::GoToRequest_<ContainerAllocator1> & lhs, const ::master_layer::GoToRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::GoToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::GoToRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::GoToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::GoToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::GoToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::GoToRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_layer::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4b481e35a48ba42de834cce00fdb90c";
  }

  static const char* value(const ::master_layer::GoToRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4b481e35a48ba42ULL;
  static const uint64_t static_value2 = 0xde834cce00fdb90cULL;
};

template<class ContainerAllocator>
struct DataType< ::master_layer::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_layer/GoToRequest";
  }

  static const char* value(const ::master_layer::GoToRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_layer::GoToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_layer/Waypoint waypoint\n"
"float64 max_forward_speed\n"
"string interpolator\n"
"\n"
"================================================================================\n"
"MSG: master_layer/Waypoint\n"
"std_msgs/Header header\n"
"geometry_msgs/Point point\n"
"float64 max_forward_speed\n"
"float64 heading_offset\n"
"bool use_fixed_heading\n"
"float64 radius_of_acceptance\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::master_layer::GoToRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_layer::GoToRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoint);
      stream.next(m.max_forward_speed);
      stream.next(m.interpolator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoToRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_layer::GoToRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_layer::GoToRequest_<ContainerAllocator>& v)
  {
    s << indent << "waypoint: ";
    s << std::endl;
    Printer< ::master_layer::Waypoint_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint);
    s << indent << "max_forward_speed: ";
    Printer<double>::stream(s, indent + "  ", v.max_forward_speed);
    s << indent << "interpolator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.interpolator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_LAYER_MESSAGE_GOTOREQUEST_H
