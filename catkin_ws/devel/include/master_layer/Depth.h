// Generated by gencpp from file master_layer/Depth.msg
// DO NOT EDIT!


#ifndef MASTER_LAYER_MESSAGE_DEPTH_H
#define MASTER_LAYER_MESSAGE_DEPTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace master_layer
{
template <class ContainerAllocator>
struct Depth_
{
  typedef Depth_<ContainerAllocator> Type;

  Depth_()
    : header()
    , depth(0.0)  {
    }
  Depth_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::master_layer::Depth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_layer::Depth_<ContainerAllocator> const> ConstPtr;

}; // struct Depth_

typedef ::master_layer::Depth_<std::allocator<void> > Depth;

typedef boost::shared_ptr< ::master_layer::Depth > DepthPtr;
typedef boost::shared_ptr< ::master_layer::Depth const> DepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_layer::Depth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_layer::Depth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_layer::Depth_<ContainerAllocator1> & lhs, const ::master_layer::Depth_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_layer::Depth_<ContainerAllocator1> & lhs, const ::master_layer::Depth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::Depth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::Depth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::Depth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::Depth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::Depth_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_layer::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecaa3eb2663713277f30af306d8347d1";
  }

  static const char* value(const ::master_layer::Depth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecaa3eb266371327ULL;
  static const uint64_t static_value2 = 0x7f30af306d8347d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_layer::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_layer/Depth";
  }

  static const char* value(const ::master_layer::Depth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_layer::Depth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Uses the pressure reading to provide the depth at which the vehicle is\n"
"# from the surface of the water body\n"
"\n"
"Header header             # timestamp of the measurement\n"
"                          # frame_id is the location of the pressure sensor\n"
"\n"
"float32 depth             # Absolute value of depth reading in meters\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::master_layer::Depth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_layer::Depth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Depth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_layer::Depth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_layer::Depth_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_LAYER_MESSAGE_DEPTH_H
