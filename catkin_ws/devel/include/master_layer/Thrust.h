// Generated by gencpp from file master_layer/Thrust.msg
// DO NOT EDIT!


#ifndef MASTER_LAYER_MESSAGE_THRUST_H
#define MASTER_LAYER_MESSAGE_THRUST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace master_layer
{
template <class ContainerAllocator>
struct Thrust_
{
  typedef Thrust_<ContainerAllocator> Type;

  Thrust_()
    : sideward_back(0)
    , sideward_front(0)
    , forward_right(0)
    , forward_left(0)
    , upward_north_east(0)
    , upward_north_west(0)
    , upward_south_east(0)
    , upward_south_west(0)
    , marker_dropper(0)
    , torpedo(0)  {
    }
  Thrust_(const ContainerAllocator& _alloc)
    : sideward_back(0)
    , sideward_front(0)
    , forward_right(0)
    , forward_left(0)
    , upward_north_east(0)
    , upward_north_west(0)
    , upward_south_east(0)
    , upward_south_west(0)
    , marker_dropper(0)
    , torpedo(0)  {
  (void)_alloc;
    }



   typedef int16_t _sideward_back_type;
  _sideward_back_type sideward_back;

   typedef int16_t _sideward_front_type;
  _sideward_front_type sideward_front;

   typedef int16_t _forward_right_type;
  _forward_right_type forward_right;

   typedef int16_t _forward_left_type;
  _forward_left_type forward_left;

   typedef int16_t _upward_north_east_type;
  _upward_north_east_type upward_north_east;

   typedef int16_t _upward_north_west_type;
  _upward_north_west_type upward_north_west;

   typedef int16_t _upward_south_east_type;
  _upward_south_east_type upward_south_east;

   typedef int16_t _upward_south_west_type;
  _upward_south_west_type upward_south_west;

   typedef int16_t _marker_dropper_type;
  _marker_dropper_type marker_dropper;

   typedef int16_t _torpedo_type;
  _torpedo_type torpedo;





  typedef boost::shared_ptr< ::master_layer::Thrust_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::master_layer::Thrust_<ContainerAllocator> const> ConstPtr;

}; // struct Thrust_

typedef ::master_layer::Thrust_<std::allocator<void> > Thrust;

typedef boost::shared_ptr< ::master_layer::Thrust > ThrustPtr;
typedef boost::shared_ptr< ::master_layer::Thrust const> ThrustConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::master_layer::Thrust_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::master_layer::Thrust_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::master_layer::Thrust_<ContainerAllocator1> & lhs, const ::master_layer::Thrust_<ContainerAllocator2> & rhs)
{
  return lhs.sideward_back == rhs.sideward_back &&
    lhs.sideward_front == rhs.sideward_front &&
    lhs.forward_right == rhs.forward_right &&
    lhs.forward_left == rhs.forward_left &&
    lhs.upward_north_east == rhs.upward_north_east &&
    lhs.upward_north_west == rhs.upward_north_west &&
    lhs.upward_south_east == rhs.upward_south_east &&
    lhs.upward_south_west == rhs.upward_south_west &&
    lhs.marker_dropper == rhs.marker_dropper &&
    lhs.torpedo == rhs.torpedo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::master_layer::Thrust_<ContainerAllocator1> & lhs, const ::master_layer::Thrust_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace master_layer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::Thrust_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::master_layer::Thrust_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::Thrust_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::master_layer::Thrust_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::Thrust_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::master_layer::Thrust_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::master_layer::Thrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26902eeb89b0dc729d9c14f541db9878";
  }

  static const char* value(const ::master_layer::Thrust_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26902eeb89b0dc72ULL;
  static const uint64_t static_value2 = 0x9d9c14f541db9878ULL;
};

template<class ContainerAllocator>
struct DataType< ::master_layer::Thrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "master_layer/Thrust";
  }

  static const char* value(const ::master_layer::Thrust_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::master_layer::Thrust_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 sideward_back\n"
"int16 sideward_front\n"
"int16 forward_right\n"
"int16 forward_left\n"
"int16 upward_north_east\n"
"int16 upward_north_west\n"
"int16 upward_south_east\n"
"int16 upward_south_west\n"
"int16 marker_dropper\n"
"int16 torpedo\n"
;
  }

  static const char* value(const ::master_layer::Thrust_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::master_layer::Thrust_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sideward_back);
      stream.next(m.sideward_front);
      stream.next(m.forward_right);
      stream.next(m.forward_left);
      stream.next(m.upward_north_east);
      stream.next(m.upward_north_west);
      stream.next(m.upward_south_east);
      stream.next(m.upward_south_west);
      stream.next(m.marker_dropper);
      stream.next(m.torpedo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Thrust_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::master_layer::Thrust_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::master_layer::Thrust_<ContainerAllocator>& v)
  {
    s << indent << "sideward_back: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sideward_back);
    s << indent << "sideward_front: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sideward_front);
    s << indent << "forward_right: ";
    Printer<int16_t>::stream(s, indent + "  ", v.forward_right);
    s << indent << "forward_left: ";
    Printer<int16_t>::stream(s, indent + "  ", v.forward_left);
    s << indent << "upward_north_east: ";
    Printer<int16_t>::stream(s, indent + "  ", v.upward_north_east);
    s << indent << "upward_north_west: ";
    Printer<int16_t>::stream(s, indent + "  ", v.upward_north_west);
    s << indent << "upward_south_east: ";
    Printer<int16_t>::stream(s, indent + "  ", v.upward_south_east);
    s << indent << "upward_south_west: ";
    Printer<int16_t>::stream(s, indent + "  ", v.upward_south_west);
    s << indent << "marker_dropper: ";
    Printer<int16_t>::stream(s, indent + "  ", v.marker_dropper);
    s << indent << "torpedo: ";
    Printer<int16_t>::stream(s, indent + "  ", v.torpedo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MASTER_LAYER_MESSAGE_THRUST_H
