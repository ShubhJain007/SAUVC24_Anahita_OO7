// Generated by gencpp from file uuv_control_msgs/CancelRequestRequest.msg
// DO NOT EDIT!


#ifndef UUV_CONTROL_MSGS_MESSAGE_CANCELREQUESTREQUEST_H
#define UUV_CONTROL_MSGS_MESSAGE_CANCELREQUESTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uuv_control_msgs
{
template <class ContainerAllocator>
struct CancelRequestRequest_
{
  typedef CancelRequestRequest_<ContainerAllocator> Type;

  CancelRequestRequest_()
    : service_name()  {
    }
  CancelRequestRequest_(const ContainerAllocator& _alloc)
    : service_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _service_name_type;
  _service_name_type service_name;





  typedef boost::shared_ptr< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CancelRequestRequest_

typedef ::uuv_control_msgs::CancelRequestRequest_<std::allocator<void> > CancelRequestRequest;

typedef boost::shared_ptr< ::uuv_control_msgs::CancelRequestRequest > CancelRequestRequestPtr;
typedef boost::shared_ptr< ::uuv_control_msgs::CancelRequestRequest const> CancelRequestRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator1> & lhs, const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator2> & rhs)
{
  return lhs.service_name == rhs.service_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator1> & lhs, const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace uuv_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d849f5602eed7d4517525d483743aae2";
  }

  static const char* value(const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd849f5602eed7d45ULL;
  static const uint64_t static_value2 = 0x17525d483743aae2ULL;
};

template<class ContainerAllocator>
struct DataType< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uuv_control_msgs/CancelRequestRequest";
  }

  static const char* value(const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string service_name\n"
;
  }

  static const char* value(const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.service_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CancelRequestRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uuv_control_msgs::CancelRequestRequest_<ContainerAllocator>& v)
  {
    s << indent << "service_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.service_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UUV_CONTROL_MSGS_MESSAGE_CANCELREQUESTREQUEST_H
