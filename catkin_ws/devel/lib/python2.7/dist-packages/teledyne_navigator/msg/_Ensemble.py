# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from teledyne_navigator/Ensemble.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Ensemble(genpy.Message):
  _md5sum = "94df2ec34ed0bb3e1d995589e95990e5"
  _type = "teledyne_navigator/Ensemble"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# DVL ensemble output data.

# See 'DVL Output Data Format (PD4/PD5) Details' and 'DVL Output Data Format
# (PD5) Details' in the Navigator Technical Manual for more information.

std_msgs/Header header

# The number of beams in the DVL.
# All arrays are of this size.
int8 NUMBER_OF_BEAMS=4

# Vessel velocity w.r.t. bottom in m/s in ENU.
geometry_msgs/Vector3 bottom_velocity
float64 bottom_velocity_error
bool bottom_velocity_is_valid

# Vertical range to the bottom from each beam in m.
float64[4] beam_range_to_bottom

# Bottom status.
bool[4] beam_low_echo_amplitude
bool[4] beam_low_correlation

# Vessel velocity w.r.t. reference layer in m/s in ENU.
geometry_msgs/Vector3 reference_velocity
float64 reference_velocity_error
bool reference_velocity_is_valid

# Reference layer in m.
float64 reference_layer_start
float64 reference_layer_end

# Reference layer status.
bool reference_layer_altitude_too_shallow
bool[4] reference_layer_beam_low_correlation

# Speed of sound in m/s.
float64 speed_of_sound

# Temperature of the water at the transducer in Celsius.
float64 temperature

# Salinity in part per thousand.
float64 salinity

# Depth in m.
float64 depth

# Orientation in radians.
float64 pitch
float64 roll
float64 heading

# Distance made good over the bottom since the time of first ping in m in ENU.
geometry_msgs/Vector3 bottom_translation
float64 bottom_translation_error

# Distance made good over the reference layer since the time of first ping in m
# in ENU.
geometry_msgs/Vector3 reference_translation
float64 reference_translation_error


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  NUMBER_OF_BEAMS = 4

  __slots__ = ['header','bottom_velocity','bottom_velocity_error','bottom_velocity_is_valid','beam_range_to_bottom','beam_low_echo_amplitude','beam_low_correlation','reference_velocity','reference_velocity_error','reference_velocity_is_valid','reference_layer_start','reference_layer_end','reference_layer_altitude_too_shallow','reference_layer_beam_low_correlation','speed_of_sound','temperature','salinity','depth','pitch','roll','heading','bottom_translation','bottom_translation_error','reference_translation','reference_translation_error']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','float64','bool','float64[4]','bool[4]','bool[4]','geometry_msgs/Vector3','float64','bool','float64','float64','bool','bool[4]','float64','float64','float64','float64','float64','float64','float64','geometry_msgs/Vector3','float64','geometry_msgs/Vector3','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,bottom_velocity,bottom_velocity_error,bottom_velocity_is_valid,beam_range_to_bottom,beam_low_echo_amplitude,beam_low_correlation,reference_velocity,reference_velocity_error,reference_velocity_is_valid,reference_layer_start,reference_layer_end,reference_layer_altitude_too_shallow,reference_layer_beam_low_correlation,speed_of_sound,temperature,salinity,depth,pitch,roll,heading,bottom_translation,bottom_translation_error,reference_translation,reference_translation_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ensemble, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bottom_velocity is None:
        self.bottom_velocity = geometry_msgs.msg.Vector3()
      if self.bottom_velocity_error is None:
        self.bottom_velocity_error = 0.
      if self.bottom_velocity_is_valid is None:
        self.bottom_velocity_is_valid = False
      if self.beam_range_to_bottom is None:
        self.beam_range_to_bottom = [0.] * 4
      if self.beam_low_echo_amplitude is None:
        self.beam_low_echo_amplitude = [False] * 4
      if self.beam_low_correlation is None:
        self.beam_low_correlation = [False] * 4
      if self.reference_velocity is None:
        self.reference_velocity = geometry_msgs.msg.Vector3()
      if self.reference_velocity_error is None:
        self.reference_velocity_error = 0.
      if self.reference_velocity_is_valid is None:
        self.reference_velocity_is_valid = False
      if self.reference_layer_start is None:
        self.reference_layer_start = 0.
      if self.reference_layer_end is None:
        self.reference_layer_end = 0.
      if self.reference_layer_altitude_too_shallow is None:
        self.reference_layer_altitude_too_shallow = False
      if self.reference_layer_beam_low_correlation is None:
        self.reference_layer_beam_low_correlation = [False] * 4
      if self.speed_of_sound is None:
        self.speed_of_sound = 0.
      if self.temperature is None:
        self.temperature = 0.
      if self.salinity is None:
        self.salinity = 0.
      if self.depth is None:
        self.depth = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heading is None:
        self.heading = 0.
      if self.bottom_translation is None:
        self.bottom_translation = geometry_msgs.msg.Vector3()
      if self.bottom_translation_error is None:
        self.bottom_translation_error = 0.
      if self.reference_translation is None:
        self.reference_translation = geometry_msgs.msg.Vector3()
      if self.reference_translation_error is None:
        self.reference_translation_error = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.bottom_velocity = geometry_msgs.msg.Vector3()
      self.bottom_velocity_error = 0.
      self.bottom_velocity_is_valid = False
      self.beam_range_to_bottom = [0.] * 4
      self.beam_low_echo_amplitude = [False] * 4
      self.beam_low_correlation = [False] * 4
      self.reference_velocity = geometry_msgs.msg.Vector3()
      self.reference_velocity_error = 0.
      self.reference_velocity_is_valid = False
      self.reference_layer_start = 0.
      self.reference_layer_end = 0.
      self.reference_layer_altitude_too_shallow = False
      self.reference_layer_beam_low_correlation = [False] * 4
      self.speed_of_sound = 0.
      self.temperature = 0.
      self.salinity = 0.
      self.depth = 0.
      self.pitch = 0.
      self.roll = 0.
      self.heading = 0.
      self.bottom_translation = geometry_msgs.msg.Vector3()
      self.bottom_translation_error = 0.
      self.reference_translation = geometry_msgs.msg.Vector3()
      self.reference_translation_error = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dB().pack(_x.bottom_velocity.x, _x.bottom_velocity.y, _x.bottom_velocity.z, _x.bottom_velocity_error, _x.bottom_velocity_is_valid))
      buff.write(_get_struct_4d().pack(*self.beam_range_to_bottom))
      buff.write(_get_struct_4B().pack(*self.beam_low_echo_amplitude))
      buff.write(_get_struct_4B().pack(*self.beam_low_correlation))
      _x = self
      buff.write(_get_struct_4dB2dB().pack(_x.reference_velocity.x, _x.reference_velocity.y, _x.reference_velocity.z, _x.reference_velocity_error, _x.reference_velocity_is_valid, _x.reference_layer_start, _x.reference_layer_end, _x.reference_layer_altitude_too_shallow))
      buff.write(_get_struct_4B().pack(*self.reference_layer_beam_low_correlation))
      _x = self
      buff.write(_get_struct_15d().pack(_x.speed_of_sound, _x.temperature, _x.salinity, _x.depth, _x.pitch, _x.roll, _x.heading, _x.bottom_translation.x, _x.bottom_translation.y, _x.bottom_translation.z, _x.bottom_translation_error, _x.reference_translation.x, _x.reference_translation.y, _x.reference_translation.z, _x.reference_translation_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bottom_velocity is None:
        self.bottom_velocity = geometry_msgs.msg.Vector3()
      if self.reference_velocity is None:
        self.reference_velocity = geometry_msgs.msg.Vector3()
      if self.bottom_translation is None:
        self.bottom_translation = geometry_msgs.msg.Vector3()
      if self.reference_translation is None:
        self.reference_translation = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.bottom_velocity.x, _x.bottom_velocity.y, _x.bottom_velocity.z, _x.bottom_velocity_error, _x.bottom_velocity_is_valid,) = _get_struct_4dB().unpack(str[start:end])
      self.bottom_velocity_is_valid = bool(self.bottom_velocity_is_valid)
      start = end
      end += 32
      self.beam_range_to_bottom = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      self.beam_low_echo_amplitude = _get_struct_4B().unpack(str[start:end])
      self.beam_low_echo_amplitude = list(map(bool, self.beam_low_echo_amplitude))
      start = end
      end += 4
      self.beam_low_correlation = _get_struct_4B().unpack(str[start:end])
      self.beam_low_correlation = list(map(bool, self.beam_low_correlation))
      _x = self
      start = end
      end += 50
      (_x.reference_velocity.x, _x.reference_velocity.y, _x.reference_velocity.z, _x.reference_velocity_error, _x.reference_velocity_is_valid, _x.reference_layer_start, _x.reference_layer_end, _x.reference_layer_altitude_too_shallow,) = _get_struct_4dB2dB().unpack(str[start:end])
      self.reference_velocity_is_valid = bool(self.reference_velocity_is_valid)
      self.reference_layer_altitude_too_shallow = bool(self.reference_layer_altitude_too_shallow)
      start = end
      end += 4
      self.reference_layer_beam_low_correlation = _get_struct_4B().unpack(str[start:end])
      self.reference_layer_beam_low_correlation = list(map(bool, self.reference_layer_beam_low_correlation))
      _x = self
      start = end
      end += 120
      (_x.speed_of_sound, _x.temperature, _x.salinity, _x.depth, _x.pitch, _x.roll, _x.heading, _x.bottom_translation.x, _x.bottom_translation.y, _x.bottom_translation.z, _x.bottom_translation_error, _x.reference_translation.x, _x.reference_translation.y, _x.reference_translation.z, _x.reference_translation_error,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4dB().pack(_x.bottom_velocity.x, _x.bottom_velocity.y, _x.bottom_velocity.z, _x.bottom_velocity_error, _x.bottom_velocity_is_valid))
      buff.write(self.beam_range_to_bottom.tostring())
      buff.write(self.beam_low_echo_amplitude.tostring())
      buff.write(self.beam_low_correlation.tostring())
      _x = self
      buff.write(_get_struct_4dB2dB().pack(_x.reference_velocity.x, _x.reference_velocity.y, _x.reference_velocity.z, _x.reference_velocity_error, _x.reference_velocity_is_valid, _x.reference_layer_start, _x.reference_layer_end, _x.reference_layer_altitude_too_shallow))
      buff.write(self.reference_layer_beam_low_correlation.tostring())
      _x = self
      buff.write(_get_struct_15d().pack(_x.speed_of_sound, _x.temperature, _x.salinity, _x.depth, _x.pitch, _x.roll, _x.heading, _x.bottom_translation.x, _x.bottom_translation.y, _x.bottom_translation.z, _x.bottom_translation_error, _x.reference_translation.x, _x.reference_translation.y, _x.reference_translation.z, _x.reference_translation_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.bottom_velocity is None:
        self.bottom_velocity = geometry_msgs.msg.Vector3()
      if self.reference_velocity is None:
        self.reference_velocity = geometry_msgs.msg.Vector3()
      if self.bottom_translation is None:
        self.bottom_translation = geometry_msgs.msg.Vector3()
      if self.reference_translation is None:
        self.reference_translation = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 33
      (_x.bottom_velocity.x, _x.bottom_velocity.y, _x.bottom_velocity.z, _x.bottom_velocity_error, _x.bottom_velocity_is_valid,) = _get_struct_4dB().unpack(str[start:end])
      self.bottom_velocity_is_valid = bool(self.bottom_velocity_is_valid)
      start = end
      end += 32
      self.beam_range_to_bottom = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 4
      self.beam_low_echo_amplitude = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.beam_low_echo_amplitude = list(map(bool, self.beam_low_echo_amplitude))
      start = end
      end += 4
      self.beam_low_correlation = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.beam_low_correlation = list(map(bool, self.beam_low_correlation))
      _x = self
      start = end
      end += 50
      (_x.reference_velocity.x, _x.reference_velocity.y, _x.reference_velocity.z, _x.reference_velocity_error, _x.reference_velocity_is_valid, _x.reference_layer_start, _x.reference_layer_end, _x.reference_layer_altitude_too_shallow,) = _get_struct_4dB2dB().unpack(str[start:end])
      self.reference_velocity_is_valid = bool(self.reference_velocity_is_valid)
      self.reference_layer_altitude_too_shallow = bool(self.reference_layer_altitude_too_shallow)
      start = end
      end += 4
      self.reference_layer_beam_low_correlation = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.reference_layer_beam_low_correlation = list(map(bool, self.reference_layer_beam_low_correlation))
      _x = self
      start = end
      end += 120
      (_x.speed_of_sound, _x.temperature, _x.salinity, _x.depth, _x.pitch, _x.roll, _x.heading, _x.bottom_translation.x, _x.bottom_translation.y, _x.bottom_translation.z, _x.bottom_translation_error, _x.reference_translation.x, _x.reference_translation.y, _x.reference_translation.z, _x.reference_translation_error,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4dB = None
def _get_struct_4dB():
    global _struct_4dB
    if _struct_4dB is None:
        _struct_4dB = struct.Struct("<4dB")
    return _struct_4dB
_struct_4dB2dB = None
def _get_struct_4dB2dB():
    global _struct_4dB2dB
    if _struct_4dB2dB is None:
        _struct_4dB2dB = struct.Struct("<4dB2dB")
    return _struct_4dB2dB
