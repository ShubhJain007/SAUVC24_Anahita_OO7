# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from master_layer/Thrust.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Thrust(genpy.Message):
  _md5sum = "26902eeb89b0dc729d9c14f541db9878"
  _type = "master_layer/Thrust"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 sideward_back
int16 sideward_front
int16 forward_right
int16 forward_left
int16 upward_north_east
int16 upward_north_west
int16 upward_south_east
int16 upward_south_west
int16 marker_dropper
int16 torpedo
"""
  __slots__ = ['sideward_back','sideward_front','forward_right','forward_left','upward_north_east','upward_north_west','upward_south_east','upward_south_west','marker_dropper','torpedo']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sideward_back,sideward_front,forward_right,forward_left,upward_north_east,upward_north_west,upward_south_east,upward_south_west,marker_dropper,torpedo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Thrust, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sideward_back is None:
        self.sideward_back = 0
      if self.sideward_front is None:
        self.sideward_front = 0
      if self.forward_right is None:
        self.forward_right = 0
      if self.forward_left is None:
        self.forward_left = 0
      if self.upward_north_east is None:
        self.upward_north_east = 0
      if self.upward_north_west is None:
        self.upward_north_west = 0
      if self.upward_south_east is None:
        self.upward_south_east = 0
      if self.upward_south_west is None:
        self.upward_south_west = 0
      if self.marker_dropper is None:
        self.marker_dropper = 0
      if self.torpedo is None:
        self.torpedo = 0
    else:
      self.sideward_back = 0
      self.sideward_front = 0
      self.forward_right = 0
      self.forward_left = 0
      self.upward_north_east = 0
      self.upward_north_west = 0
      self.upward_south_east = 0
      self.upward_south_west = 0
      self.marker_dropper = 0
      self.torpedo = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10h().pack(_x.sideward_back, _x.sideward_front, _x.forward_right, _x.forward_left, _x.upward_north_east, _x.upward_north_west, _x.upward_south_east, _x.upward_south_west, _x.marker_dropper, _x.torpedo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.sideward_back, _x.sideward_front, _x.forward_right, _x.forward_left, _x.upward_north_east, _x.upward_north_west, _x.upward_south_east, _x.upward_south_west, _x.marker_dropper, _x.torpedo,) = _get_struct_10h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10h().pack(_x.sideward_back, _x.sideward_front, _x.forward_right, _x.forward_left, _x.upward_north_east, _x.upward_north_west, _x.upward_south_east, _x.upward_south_west, _x.marker_dropper, _x.torpedo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.sideward_back, _x.sideward_front, _x.forward_right, _x.forward_left, _x.upward_north_east, _x.upward_north_west, _x.upward_south_east, _x.upward_south_west, _x.marker_dropper, _x.torpedo,) = _get_struct_10h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10h = None
def _get_struct_10h():
    global _struct_10h
    if _struct_10h is None:
        _struct_10h = struct.Struct("<10h")
    return _struct_10h
